Issue and pull request labeling bot for [[https://github.com/NixOS/nixpkgs][NixOS/nixpkgs]].

** Rationale

   Labels are more useful than search queries for filtering through
   issues. However, labeling is menial, and is never thorough enough. Most issues
   are left unlabeled, and that makes it harder for Nixpkgs maintainers to find
   issues that are relevant to them.

   Most Nixpkgs issue and pull request titles follow specific patterns that can be
   used to infer relevant labels with a high degree of certainty: for example,
   package updates typically follow ~foo: 1.0 -> 1.1~ layout, and new packages
   typically follow ~foo: init at 1.0~ layout; issues that have ~6.topic~ label
   typically contain specific words in the title related to that topic, etc.

** Implementation

   This bot only uses title to infer labels, because description has much more text
   and probability of it being relevant enough for labeling is much smaller, so
   much that it would warrant a Bayesian classifier. Instead, it uses a simplistic
   ruleset matcher.

   Implemented as an AWS Lambda function (i.e. [[https://en.wikipedia.org/wiki/Serverless_computing][serverless]]). Written in 45 lines of
   Clojure. Leverages new [[https://clojure.org/reference/deps_and_cli][Clojure CLI]].

** Changing labeling rules

   Change [[file:src/main/resources/ruleset.edn][ruleset.edn]] right from GitHub interface and open a pull request.

   Ruleset is a map from label names to vectors of rules. Rules can either be
   strings (case-insensitive match with non-word ~\W~ boundaries) or regexes, and
   label is added if any of the rules attached to it matches the issue title.

   More about edn format here: https://github.com/edn-format/edn

** Deployment

   You will need AWS account, GitHub account and Maven.

   Build via ~mvn package~.

   [[https://github.com/settings/tokens/new][Issue a GitHub token]] with ~public_repo~ capability.

   Add a new AWS Lambda function targeting Java 8 runtime, upload
   jar-with-dependencies, specify
   ~yegortimoshenko.nixpkgs.classifier::handleRequest~ as handler, add
   ~GITHUB_TOKEN~ environment variable that contains the token issued in the
   previous step, and save the function.

   Then, create an empty AWS API Gateway, add a POST resource, attach AWS Lambda
   function created in the previous step to the resource, create a new stage and
   deploy it.

   You should get URL that is usable as a GitHub webhook. Choose ~application/json~
   content type, and choose to only send Issues and Pull request events to it.
