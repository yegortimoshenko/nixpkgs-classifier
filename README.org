Issue and pull request labeling bot for [[https://github.com/NixOS/nixpkgs][NixOS/nixpkgs]].

** Rationale

Labels are more useful than search queries for filtering through
issues. However, labeling is menial, and is never thorough enough. Most issues
are left unlabeled, and that makes it harder for Nixpkgs maintainers to find
issues that are relevant to them.

Most Nixpkgs issue and pull request titles follow specific patterns that can be
used to infer relevant labels with a high degree of certainty: for example,
package updates typically follow ~foo: 1.0 -> 1.1~ layout, and new packages
typically follow ~foo: init at 1.0~ layout; issues that have ~6.topic~ label
typically contain specific words in the title related to that topic, etc.

** Implementation

This bot only uses title to infer labels, because description has much more text
and probability of it being relevant enough for labeling is much smaller, so
much that it would warrant a Bayesian classifier. Instead, it uses a simplistic
ruleset matcher.

It is written in 45 lines of Clojure, implemented as an AWS Lambda function,
meaning it's [[https://en.wikipedia.org/wiki/Serverless_computing][serverless]], i.e. only runs upon request (hi, PHP).

** Changing labeling rules

Change [[file:src/main/resources/ruleset.edn][ruleset.edn]] right from GitHub interface and open a pull request.

Ruleset is a map from label names to vectors of rules. Rules can either be
strings (case-insensitive match with non-word ~\W~ boundaries) or regexes, and
label is added if any of the rules attached to it matches the issue title.

More about edn format here: https://github.com/edn-format/edn

** Deployment

You will need AWS account and Maven. Build via ~mvn deploy~, add a new AWS
Lambda function targeting Java 8 runtime, upload jar-with-dependencies and save
the function. After that, create a new empty AWS API Gateway, add a POST
resource, attach previously created AWS Lambda to it, create a new stage and
deploy it.

You should get URL that is usable as a GitHub webhook. Choose ~application/json~
content type, and choose to only send Issues and Pull request events to it.
